/*****************************************************
 Se asume que viene un archivo con indicadores operaciones y cuentas
    JavaCC 
*****************************************************/
options {
 STATIC = false;
}

PARSER_BEGIN(AnalizadorLexico)
package parser;
import java.io.*;

public class AnalizadorLexico
{

     public AnalizadorLexico() {}

     public void main(StringReader Cadena)throws ParseException 
     {  
        boolean Leer=true;
        AnalizadorLexico parser;		
       
        while(Leer)		  
        try
        {
          Leer= this.Programa();
        }
        catch (ParseException e)
        {
          System.out.println("Error 3: \"Se esperaba otro componente lexico\"");
          Token t=getNextToken();
          //System.out.println(t);
        }
    }
}

PARSER_END(AnalizadorLexico)

SKIP:
{
   <"\n"|"\r">
}

TOKEN:
{
 <LCORCHETE:"[">
 |<RCORCHETE:"]">
 |<LLLAVES:"{">
 |<RLLAVES:"}"> 
 |<LPAREN: "(" >
 |<RPAREN: ")" >
 |<DIGITOS:(["0"- "9"])+>
 |<COMILLA:"\"">
 |<INDICADORES:(<COMILLA>"indicadores"<COMILLA>)>
 |<FORMULAS:(<COMILLA>"formula"<COMILLA>)>
 |<CUENTAS:(<COMILLA>"cuentas"<COMILLA>)>
 |<ESPACIO:" ">
 |<TABULACION:"\t">
 |<FORMATOFECHA:(<COMILLA>(<DIGITOS>)+"-"(<DIGITOS>)+"-"(<DIGITOS>)+<COMILLA>)>
 |<COMA: ",">
 |<DOSPUNTOS: ":"> 
 |<ID:(["a"-"z"]|["A"-"Z"])(["a"-"z" ]|["A"-"Z"]|["0"- "9"]|"_"|" "|"-"){0,31}>
}

TOKEN:
{
 <OPERACION: ["+","-","*","/"]>
}

	
void leeArchivoJason() :{}
{
    leeInicioRegistroJason() | leeEstructuraDeDatos() | finRegistroJason()
}

void leeInicioRegistroJason():{}
{
  	<LCORCHETE> | (<ESPACIO>)+(<LLLAVES>)* | (<TABULACION>)+(<LLLAVES>)*
}

void leeEstructuraDeDatos():{}
{
     estructuraLineaJason()
}

void estructuraLineaJason():{}
{
     atributo() | indicador() | cuenta() | formula() 
}

void atributo():{}
{
 	<COMILLA><ID><COMILLA><DOSPUNTOS><ESPACIO>(valorCampo()|<LLLAVES>)
}

void valorCampo():{}
{
 	<COMILLA><ID><COMILLA>|<DIGITOS>|<FORMATOFECHA>
}

// estructuda indicador
void indicador():{}
{
  <INDICADORES><DOSPUNTOS><ESPACIO><LCORCHETE>
}

// estructura Cuenta
void cuenta():{}
{
  <CUENTAS><DOSPUNTOS><ESPACIO><LCORCHETE>(<LLLAVES>)*  
}
 void formula():{}
{
    <FORMULAS><DOSPUNTOS><ESPACIO><COMILLA>operacion()<COMILLA>
} 

void operacion():{}
{
 	expresionAritmetica()(<OPERACION>expresionAritmetica())*  
}
void expresionAritmetica():{}
{
  //symbol() | (<LPAREN>)*<ID><OPERACION><ID>(<RPAREN>)* | <OPERACION><ID>
  symbol() | <LPAREN>operacion()<RPAREN> | <OPERACION>expresionAritmetica()  
}

void symbol():{}
{
     <DIGITOS>  | <ID>  
}	
	
void finRegistroJason():{}
{
 	(<COMA> | <RCORCHETE> | <RLLAVES>)+	
}

boolean Programa():{}
{  
 try
 {	 
  leeArchivoJason()
  {
   // Sentencia de inicio JSON.
   return true;
  }
 }
 catch (ParseException e)
 {
   // No cumple con la sintaxis.
   return true;
 }
 |<EOF> 
 {
   // Se finalizo el analisis.
   return false;
 } 
}
