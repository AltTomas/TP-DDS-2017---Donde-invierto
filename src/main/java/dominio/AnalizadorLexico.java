/* Generated By:JavaCC: Do not edit this line. AnalizadorLexico.java */
import java.io.*;
 public class AnalizadorLexico implements AnalizadorLexicoConstants {
  public static void main(String arg[])throws ParseException {
   BufferedReader Nuevo= new BufferedReader(new InputStreamReader(System.in));
   String Cadena;
   boolean Leer=true;
   AnalizadorLexico parser;
   System.out.print("Ruta y Nombre del archivo: ");
   try{
    Cadena=Nuevo.readLine();
   }catch(IOException e){
        System.out.println("Error al leer la cadena");
        return;
   }
   try{

     parser = new AnalizadorLexico(new FileInputStream(Cadena));
   }catch(FileNotFoundException e){
        System.out.println("El archivo "+Cadena+" no se encuentra");
        return;
   }
   while(Leer)

    try{
     Leer=parser.Programa();
    }catch (ParseException e){
      System.out.println("Error 3: \u005c"Se esperaba otro componente lexico\u005c"");
      Token t=getNextToken();
      System.out.println(t);
    }
  }

  static final public void leeArchivoJason() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCORCHETE:
    case ESPACIO:
    case TABULACION:
      leeInicioRegistroJason();
      break;
    case COMILLA:
    case INDICADORES:
    case FORMULAS:
    case CUENTAS:
      leeEstructuraDeDatos();
      break;
    case RCORCHETE:
    case RLLAVES:
    case COMA:
      finRegistroJason();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void leeInicioRegistroJason() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCORCHETE:
      jj_consume_token(LCORCHETE);
      break;
    case ESPACIO:
      label_1:
      while (true) {
        jj_consume_token(ESPACIO);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESPACIO:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LLLAVES:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(LLLAVES);
      }
      break;
    case TABULACION:
      label_3:
      while (true) {
        jj_consume_token(TABULACION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TABULACION:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LLLAVES:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(LLLAVES);
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void leeEstructuraDeDatos() throws ParseException {
    estructuraLineaJason();
  }

  static final public void estructuraLineaJason() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMILLA:
      atributo();
      break;
    case INDICADORES:
      indicador();
      break;
    case CUENTAS:
      cuenta();
      break;
    case FORMULAS:
      formula();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void atributo() throws ParseException {
    jj_consume_token(COMILLA);
    jj_consume_token(ID);
    jj_consume_token(COMILLA);
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(ESPACIO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
    case COMILLA:
    case FORMATOFECHA:
      valorCampo();
      break;
    case LLLAVES:
      jj_consume_token(LLLAVES);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void valorCampo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMILLA:
      jj_consume_token(COMILLA);
      jj_consume_token(ID);
      jj_consume_token(COMILLA);
      break;
    case DIGITOS:
      jj_consume_token(DIGITOS);
      break;
    case FORMATOFECHA:
      jj_consume_token(FORMATOFECHA);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// estructuda indicador
  static final public void indicador() throws ParseException {
    jj_consume_token(INDICADORES);
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(ESPACIO);
    jj_consume_token(LCORCHETE);
  }

// estructura Cuenta
  static final public void cuenta() throws ParseException {
    jj_consume_token(CUENTAS);
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(ESPACIO);
    jj_consume_token(LCORCHETE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LLLAVES:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(LLLAVES);
    }
  }

  static final public void formula() throws ParseException {
    jj_consume_token(FORMULAS);
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(ESPACIO);
    jj_consume_token(COMILLA);
    operacion();
    jj_consume_token(COMILLA);
  }

  static final public void operacion() throws ParseException {
    expresionAritmetica();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERACION:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      jj_consume_token(OPERACION);
      expresionAritmetica();
    }
  }

  static final public void expresionAritmetica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
    case ID:
      symbol();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      operacion();
      jj_consume_token(RPAREN);
      break;
    case OPERACION:
      jj_consume_token(OPERACION);
      expresionAritmetica();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void symbol() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
      jj_consume_token(DIGITOS);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void finRegistroJason() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        jj_consume_token(COMA);
        break;
      case RCORCHETE:
        jj_consume_token(RCORCHETE);
        break;
      case RLLAVES:
        jj_consume_token(RLLAVES);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RCORCHETE:
      case RLLAVES:
      case COMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
    }
  }

  static final public boolean Programa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCORCHETE:
    case RCORCHETE:
    case RLLAVES:
    case COMILLA:
    case INDICADORES:
    case FORMULAS:
    case CUENTAS:
    case ESPACIO:
    case TABULACION:
    case COMA:
      try {
        leeArchivoJason();
//   System.out.println("Se encontro la sentencia inicio Jason");
   {if (true) return true;}
      } catch (ParseException e) {
   System.out.println("Error 2: \u005c"Se debe  cumplir con la sintaxis.\u005c"");
   {if (true) return true;}
      }
      break;
    case 0:
      jj_consume_token(0);
   System.out.println("Se finalizo el analisis");
   {if (true) return false;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorLexicoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x17e2c,0x2000,0x10,0x4000,0x10,0x6004,0x1e00,0x8310,0x8300,0x10,0x80000,0xc0140,0x40100,0x10028,0x10028,0x17e2d,};
   }

  /** Constructor with InputStream. */
  public AnalizadorLexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorLexico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorLexico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorLexico(AnalizadorLexicoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

 }
