/*****************************************************
 Se asume que viene un archivo con indicadores operaciones y cuentas
    JavaCC y desde JavaCC
*****************************************************/

PARSER_BEGIN(AnalizadorLexico)
import java.io.*;
 public class AnalizadorLexico{
  public static void main(String arg[])throws ParseException {
   BufferedReader Nuevo= new BufferedReader(new InputStreamReader(System.in));
   String Cadena;
   boolean Leer=true;
   AnalizadorLexico parser;
   System.out.print("Ruta y Nombre del archivo: ");
   try{
    Cadena=Nuevo.readLine();
   }catch(IOException e){
   	System.out.println("Error al leer la cadena");
   	return;
   }
   try{
    parser = new AnalizadorLexico(new FileInputStream(Cadena));
   }catch(FileNotFoundException e){
   	System.out.println("El archivo "+Cadena+" no se encuentra");
   	return;
   }
   while(Leer)
    /*****************************************************************
      Primer Manejo de errores, aqu√≠ notamos que solo tenemos un tipo
      de error el error de "Se esperaba otro componente lexico"
    *****************************************************************/
    try{
     Leer=parser.Programa();
    }catch (ParseException e){
      System.out.println("Error 3: \"Se esperaba otro componente lexico\"");
      Token t=getNextToken();
    }
  }
 }
PARSER_END(AnalizadorLexico)

SKIP:
{
 <"\t"|" "|"\n"|"\r">
}

TOKEN:
{
  <LEE:"lee">
 |<PON:"pon">
 |<PNT: ".">
 |<OPERACION: ["+","-","*","/"]>
 |<ID: (["a"-"z","A"-"Z"]|["0"-"9"]|"_")>
 |<CAD: "\""(~["\n","\r"])*"\"">
 |<NOVAL: ~["a"-"z","0"-"9","-","\"","\n","\t","\r","."]>
  /***********************************************************
    Manejo de errores del tipo TokenMrgError
  ************************************************************/
  {System.out.println("Error 1: \"Caracter no valido\"");}
}


void Lee():{}
{
 <LEE><ID>(<OPERACION><ID>)*<PNT>
}

void Pon():{}
{
 <PON>(<ID>|<CAD>)<PNT>
}

boolean Programa():{}
{ 
 
 try{
  Lee()
  {
   System.out.println("Se encontro la sentencia lee");
   return true;
  }
 }catch (ParseException e){
   System.out.println("Error 2: \"lee debe de cumplir con la sintaxis lee ID.\"");
   return true;
 }
|try{
  Pon()
  {
   System.out.println("Se encontro la sentencia pon");
   return true;
  }
 }catch (ParseException e){
   System.out.println("Error 2: \"pon debe de cumplir con la sintaxis pon ID. o pon Cadena.\"");
   return true;
 }
 |<EOF>
  {
   System.out.println("Se finalizo el analisis.l");
   return false;
  }
}
